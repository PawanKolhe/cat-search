{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","components/refresh-button/refresh-button.component.jsx","App.js","serviceWorker.js","index.js"],"names":["override","css","Card","state","loading","className","sizeUnit","size","color","this","src","props","character","name","toLowerCase","style","display","onLoad","setState","alt","Component","CardList","characters","map","key","id","SearchBox","type","placeholder","onChange","handleChange","RefreshButton","onClick","handleRefresh","spin","App","e","searchField","target","value","setTimeout","fetchData","fetch","then","response","json","users","setPrefix","results","user","nextId","first","last","filteredCharacters","filter","includes","length","email","replace","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.42d33d25.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { css } from '@emotion/core';\r\nimport BounceLoader from 'react-spinners/BounceLoader';\r\n\r\nimport './card.styles.css'\r\n\r\nconst override = css`\r\n    display: block;\r\n    margin: 0 auto;\r\n    border-color: red;\r\n`;\r\n\r\nclass Card extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      loading: true\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card-container\">\r\n        <div className=\"card-img\">\r\n          <BounceLoader\r\n            css={override}\r\n            sizeUnit={\"px\"}\r\n            size={50}\r\n            color={'#FFFFFF'}\r\n            loading={this.state.loading}\r\n          />\r\n          <img \r\n            src={`https://robohash.org/${this.props.character.name.toLowerCase()}?set=set4&size=180x180`} \r\n            style={this.state.loading ? {display: 'none'} : {}}\r\n            onLoad={() => this.setState({ loading: false })} \r\n            alt=\"Cat\" \r\n          />\r\n        </div>\r\n        <div className=\"card-text\">\r\n          <h1>{this.props.character.name}</h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../card/card.component'\r\n\r\nimport './card-list.styles.css'\r\n\r\nconst CardList = (props) => {\r\n  return (\r\n    <div className='card-list'>\r\n      {props.characters.map(character => {\r\n        return <Card key={character.id} character={character} />\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nimport './search-box.styles.css'\r\n\r\nconst SearchBox = (props) => {\r\n    return (\r\n        <div className=\"search-box-container\">\r\n            <input className=\"search-box\" type=\"search\" placeholder={props.placeholder} onChange={props.handleChange} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nimport './refresh-button.styles.css';\r\n\r\nconst RefreshButton = (props) => {\r\n    return (\r\n        <div className=\"button-container\">\r\n            <button className=\"refresh-button\" onClick={props.handleRefresh}>\r\n                <i className={`fas fa-sync-alt ${props.spin ? 'fa-spin' : ''}`}></i> Refresh\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RefreshButton;","import React, { Component } from 'react';\r\nimport CardList from './components/card-list/card-list.component'\r\nimport SearchBox from './components/search-box/search-box.component'\r\nimport nextId, { setPrefix } from \"react-id-generator\";\r\nimport RefreshButton from './components/refresh-button/refresh-button.component';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      characters: [],\r\n      searchField: '',\r\n      spin: false\r\n    };\r\n  }\r\n\r\n  fetchData() {\r\n    fetch(\"https://randomuser.me/api/?results=16&inc=name\")\r\n      .then(response => response.json())\r\n      .then(users => {\r\n        // add unique id to imported users\r\n        setPrefix(\"\");\r\n        users = users.results.map(user => {\r\n          user.id = nextId();\r\n          user.name = user.name.first + \" \" + user.name.last;\r\n          return user;\r\n        });\r\n        // store users as characters in state\r\n        this.setState({ characters: users });\r\n      });\r\n\r\n    return true;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchData();\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ searchField: e.target.value });\r\n  }\r\n\r\n  handleRefresh = () => {\r\n    this.setState({ spin: true });\r\n    setTimeout(() => {\r\n      this.setState({ spin: false });\r\n    }, 3000);\r\n    this.fetchData();\r\n  }\r\n\r\n  render() {\r\n    // filter items by string in search box\r\n    const {characters, searchField} = this.state;\r\n    const filteredCharacters = characters.filter(character => \r\n      character.name.toLowerCase().includes(searchField.toLowerCase())\r\n    );\r\n    // if no search string matches generated names then make new character using the search string\r\n    if(filteredCharacters.length === 0) {\r\n      filteredCharacters[1] = {\r\n        name: searchField,\r\n        email: searchField.toLowerCase().replace(\" \", \"\") + \"@example.com\",\r\n        id: 0,\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Cat Search</h1>\r\n        <RefreshButton handleRefresh={this.handleRefresh} spin={this.state.spin} />\r\n        <SearchBox handleChange={this.handleChange} placeholder=\"Search your cat\" />\r\n        <CardList characters={filteredCharacters} />\r\n        <p className=\"footer\">Created by <a href=\"https://pawankolhe.com\" className=\"underline\">Pawan Kolhe</a></p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}