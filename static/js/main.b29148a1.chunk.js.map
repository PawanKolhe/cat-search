{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["override","css","Card","state","loading","className","sizeUnit","size","color","this","src","props","character","name","style","display","onLoad","setState","alt","Component","CardList","characters","map","key","id","SearchBox","type","placeholder","onChange","handleChange","App","e","searchField","target","value","fetch","then","response","json","users","setPrefix","user","nextId","surname","filteredCharacters","filter","toLowerCase","includes","length","email","replace","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ggBAMA,IAAMA,EAAWC,cAAH,KAyCCC,E,YAlCb,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXC,SAAS,GAJC,E,sEAQJ,IAAD,OACP,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,YACb,kBAAC,IAAD,CACEJ,IAAKD,EACLM,SAAU,KACVC,KAAM,GACNC,MAAO,UACPJ,QAASK,KAAKN,MAAMC,UAEtB,yBACEM,IAAG,+BAA0BD,KAAKE,MAAMC,UAAUC,KAA/C,0BACHC,MAAOL,KAAKN,MAAMC,QAAU,CAACW,QAAS,QAAU,GAChDC,OAAQ,kBAAM,EAAKC,SAAS,CAAEb,SAAS,KACvCc,IAAI,SAGR,yBAAKb,UAAU,aACb,4BAAKI,KAAKE,MAAMC,UAAUC,Y,GA5BjBM,aCGJC,G,MAVE,SAACT,GAChB,OACE,yBAAKN,UAAU,aACZM,EAAMU,WAAWC,KAAI,SAAAV,GACpB,OAAO,kBAAC,EAAD,CAAMW,IAAKX,EAAUY,GAAIZ,UAAWA,UCGpCa,G,MARG,SAACd,GACf,OACI,yBAAKN,UAAU,wBACX,2BAAOA,UAAU,aAAaqB,KAAK,SAASC,YAAahB,EAAMgB,YAAaC,SAAUjB,EAAMkB,kB,gBCuDzFC,G,kBAtDb,aAAe,IAAD,8BACZ,+CAwBFD,aAAe,SAACE,GACd,EAAKd,SAAS,CAAEe,YAAaD,EAAEE,OAAOC,SAvBtC,EAAK/B,MAAQ,CACXkB,WAAY,GACZW,YAAa,IALH,E,iFASO,IAAD,OAClBG,MAAM,uDACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEJC,oBAAU,IACVD,EAAQA,EAAMjB,KAAI,SAAAmB,GAGhB,OAFAA,EAAKjB,GAAKkB,MACVD,EAAK5B,MAAQ,IAAM4B,EAAKE,QACjBF,KAGT,EAAKxB,SAAS,CAAEI,WAAYkB,S,+BAQzB,MAE2B9B,KAAKN,MAAhCkB,EAFA,EAEAA,WAAYW,EAFZ,EAEYA,YACbY,EAAqBvB,EAAWwB,QAAO,SAAAjC,GAAS,OACpDA,EAAUC,KAAKiC,cAAcC,SAASf,EAAYc,kBAUpD,OARiC,IAA9BF,EAAmBI,SACpBJ,EAAmB,GAAK,CACtB/B,KAAMmB,EACNiB,MAAOjB,EAAYc,cAAcI,QAAQ,IAAK,IAAM,eACpD1B,GAAI,IAKN,yBAAKnB,UAAU,OACb,0CACA,kBAAC,EAAD,CAAWwB,aAAcpB,KAAKoB,aAAcF,YAAY,oBACxD,kBAAC,EAAD,CAAUN,WAAYuB,IACtB,uBAAGvC,UAAU,UAAb,+B,GAjDUc,cCKEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.b29148a1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { css } from '@emotion/core';\r\nimport BounceLoader from 'react-spinners/BounceLoader';\r\n\r\nimport './card.styles.css'\r\n\r\nconst override = css`\r\n    display: block;\r\n    margin: 0 auto;\r\n    border-color: red;\r\n`;\r\n\r\nclass Card extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      loading: true\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card-container\">\r\n        <div className=\"card-img\">\r\n          <BounceLoader\r\n            css={override}\r\n            sizeUnit={\"px\"}\r\n            size={50}\r\n            color={'#FFFFFF'}\r\n            loading={this.state.loading}\r\n          />\r\n          <img \r\n            src={`https://robohash.org/${this.props.character.name}?set=set4&size=180x180`} \r\n            style={this.state.loading ? {display: 'none'} : {}}\r\n            onLoad={() => this.setState({ loading: false })} \r\n            alt=\"Cat\" \r\n          />\r\n        </div>\r\n        <div className=\"card-text\">\r\n          <h1>{this.props.character.name}</h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../card/card.component'\r\n\r\nimport './card-list.styles.css'\r\n\r\nconst CardList = (props) => {\r\n  return (\r\n    <div className='card-list'>\r\n      {props.characters.map(character => {\r\n        return <Card key={character.id} character={character} />\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nimport './search-box.styles.css'\r\n\r\nconst SearchBox = (props) => {\r\n    return (\r\n        <div className=\"search-box-container\">\r\n            <input className=\"search-box\" type=\"search\" placeholder={props.placeholder} onChange={props.handleChange} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\nimport CardList from './components/card-list/card-list.component'\nimport SearchBox from './components/search-box/search-box.component'\nimport nextId, { setPrefix } from \"react-id-generator\";\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      characters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://uinames.com/api/?region=india&amount=16&ext\")\n      .then(response => response.json())\n      .then(users => {\n        // add unique id to imported users\n        setPrefix(\"\");\n        users = users.map(user => {\n          user.id = nextId();\n          user.name += \" \" + user.surname;\n          return user;\n        });\n        // store users as characters in state\n        this.setState({ characters: users });\n      });\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  }\n\n  render() {\n    // filter items by string in search box\n    const {characters, searchField} = this.state;\n    const filteredCharacters = characters.filter(character => \n      character.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    if(filteredCharacters.length === 0) {\n      filteredCharacters[1] = {\n        name: searchField,\n        email: searchField.toLowerCase().replace(\" \", \"\") + \"@example.com\",\n        id: 0,\n      }\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>Cat Search</h1>\n        <SearchBox handleChange={this.handleChange} placeholder=\"Search your cat\" />\n        <CardList characters={filteredCharacters} />\n        <p className=\"footer\">Created by Pawan Kolhe</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}